# Реализовать проверку (валидацию) данных для всех классов.
# Проверять основные атрибуты (название, номер, тип и т.п.)
# на наличие, длину и т.п. (в зависимости от атрибута):
# Валидация должна взываться при создании объекта, если
# объект невалидный, то должно выбрасываться исключение
# Должен быть метод valid? который возвращает true, если
# объект валидный и false - в противном случае.

# Релизовать проверку на формат номера поезда. Допустимый формат:
# три буквы или цифры в любом порядке, необязательный дефис (может быть, а может нет)
# и еще 2 буквы или цифры после дефиса.

# Убрать из классов все puts (кроме методов, которые и должны что-то выводить на экран),
# методы просто возвращают значения. (Начинаем бороться за чистоту кода).

# Реaлизовать простой текстовый интерфейс для создания поездов
# (если у вас уже реализован интерфейс, то дополнить его):
# Программа запрашивает у пользователя данные для создания поезда
# (номер и другие необходимые атрибуты)
# Если атрибуты валидные, то выводим информацию о том, что создан такой-то поезд
# Если введенные данные невалидные, то программа должна вывести сообщение о возникших ошибках и
# заново запросить данные у пользователя. Реализовать это через механизм обработки исключений


require_relative "train"


class Main
  attr_reader :trains

  def initialize
    @trains = []
  end


  def create_train
    number_format = /\A[a-z0-9]{3}-*[a-z0-9]{2}\z/i
    begin
      puts "Введите номер поезда"
      number = gets.chomp
      raise if number !~ number_format
    rescue
      puts "Номер поезда не соответствует формату! Попробуйте еще раз"
      retry
    end
    puts "ввели номер #{number}"
    begin
      puts "Выберите тип создаваемого поезда:
      1. Пассажирский,
      2. Грузовой"
      type = gets.chomp.to_i
      raise if type < 1 && type > 2
    rescue
      puts "Введено неправильное значение! введите 1 или 2 "
      retry
    end

    if type == 1
      train = Train.new(number, :passenger)
    elsif type == 2
      train = Train.new(number, :cargo)
    end

    puts "Поезд номер #{number}, тип #{train.type} создан успешно!"

    self.trains << train

  end


  protected


  main = Main.new
  loop do
    puts "Для создания поезда нажмите 1"

    choise = gets.chomp.to_i

    case choise

      when 1
        main.create_train
      else
        puts "Вы ввели неправильное значение. Повторите снова"
    end
  end
end

